基本の文法
==========

Pythonプログラムの書き方をここでは説明していきます。

Pythonを対話モードで起動し、例に挙げるコードを入力、実行してみてください。

入力する文字
------------

コードを入力する際、日本語の文字列部分以外の文字は、次の点に注意してください。

* スペースは半角スペース `` `` を使う(全角は使えません)
* コメントや文字列以外の部分の命令の入力には半角の文字を使う(全角は使えません)
* 変数名、関数名などの大文字と小文字に気をつける(Pythonでは大文字と小文字は区別されます)

インデント
----------

コメント
--------

コメント文はプログラムコードを説明したり、プログラム中にメモを書く際に使います。コメント部分はPythonからは実行されず、解釈もされません。

コメントはプログラム中で ``#`` の後に書きます。 ``#`` の文字から行末までがコメントとして扱われます。

.. doctest::

   >>> # これはコメントです
   >>> print(u"これは実行されます")
   これは実行されます
   >>> #print(u"これは実行されません")

計算する
--------

対話モードを計算機として使ってみます。

Pythonでは数字の入力は数値として扱われます。小数点などを指定しなければ、整数として扱われます。

.. doctest::

   >>> 12345
   12345

四則演算を行う場合、加算は ``+`` 、減算は ``-`` 、乗算は ``*`` 、除算は ``/`` の記号をそれぞれ使います。

.. doctest::

   >>> 5 + 3  # 5と3を足す
   8
   >>> 5 - 3  # 5から3を引く
   2
   >>> 5 * 3  # 5に3を掛ける
   15
   >>> 5 / 3  # 5を3で割る
   1

整数同士の割り算の結果は整数に丸められてしまうことに注意してください。いずれか片方が小数であれば、小数として計算されます。 [#]_

.. doctest::

   >>> 5.0 / 3
   1.6666666666666667

計算の優先順位を示すための括弧 ``()`` も使えます。入れ子になる場合でも同じ括弧の文字 ``()`` を使います。

.. doctest::

   >>> 2 * (5 * (2 + 3) + 1)
   52

また、四則演算の他にもべき乗 ``**`` や、余剰 ``%`` の計算もできます。

.. doctest::

   >>> 2 ** 4  # 2の4乗
   16
   >>> 10 % 3  # 10を3で割った余り
   1

.. [#] Python3では整数への丸めは行われず、割り算の結果は小数になります。

変数
----

データを保持しておくために、 **変数** を使うことができます。

変数に値を代入するには、等号 ``=`` を使います。左辺に変数名、右辺に値を指定します。

.. doctest::

   >>> width = 20
   >>> height = 5 * 9
   >>> width * height
   900

また、複数の変数に一度に値を代入することもできます。

.. doctest::

   >>> x = y = z = 0
   >>> x
   0
   >>> y
   0
   >>> z
   0

定義していない変数は使えません。使おうとするとエラーが発生します。

.. doctest::

   >>> hoge  # hogeは未定義
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   NameError: name 'hoge' is not defined
   >>> hoge = 100
   >>> hoge
   100

変数の定義は、値を代入すればできます。事前の宣言文等は必要ありません。

.. note::

   対話モードで定義した変数は、対話モードを終了するまでは保持されたままになります。

論理演算
--------

論理演算には ``and`` ``or`` ``not`` を使います。真は ``True`` 、偽は ``False`` で表します。

.. doctest::

   >>> True and True
   True
   >>> True and False
   False
   >>> False and True
   False
   >>> False and False
   False
   >>> True or True
   True
   >>> True or False
   True
   >>> False or True
   True
   >>> False or False
   False
   >>> not True
   False
   >>> not False
   True

また、数値の ``0`` や空の値 ``None`` 、空の文字列 ``""`` 、空のリスト ``[]`` 、空の辞書 ``{}`` は偽の値として扱われます。それ以外は真の値として扱われます。

and演算は結果が真になる場合、「左から順に見て一番最後の値」を値として使います。結果が偽になる場合、「左から順に見て、最初に偽になる値」を値として使います。

.. doctest::

   >>> True and 123 and "abc"  # 真
   'abc'
   >>> True and 0 and "abc"  # 偽
   0

or演算は結果が真になる場合、「左から順に見て一番最初に真になる値」を値として使います。結果が偽になる場合、「左から順に見て一番最後の値」を値として使います。

.. doctest::

   >>> False or 123 or "abc"  # 真
   123
   >>> False or 0 or []  # 偽
   []

データ構造
----------

関数
----

クラス
------

次は
----
